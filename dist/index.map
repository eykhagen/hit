{"version":3,"sources":["helper/cmd.ts","helper/git.ts","branch/module.ts","branch/commands.ts","index.ts"],"names":[],"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","file":"index.map","sourceRoot":"../src","sourcesContent":["import chalk from 'chalk';\n/**\n * Checks whether a value is undefined\n * @param {*} value \n */\nexport const checkUndefined = (value: any) => {\n  return typeof value === 'undefined';\n}\n\n/**\n * Logs a message with a predefined Error syntax \n * @param message \n */\nexport const writeError = (message: string) => {\n  console.log(`${chalk.red('[Error]')} ${chalk.hex(\"#e74c3c\")(message)}`)\n}\n\n/**\n * Logs a message with a predefined Success syntax and a green checkmark\n * @param message \n */\nexport const writeSuccess = (message: string) => {\n  console.log(`[ ${chalk.hex('#16a085')('\\u2713')} ] ${chalk.hex('#1abc9c').bold(message)}`);\n}\n\n/**\n * Logs which git command(s) is equivalent to the used hit command to let beginners learn those quickly\n * @param message \n */\nexport const writeCommand = (message: string) => {\n  console.log(chalk.grey.bold(message));\n}","import { Repository } from 'nodegit';\nimport { writeError } from './cmd';\n/**\n * Opens the repository at the cwd and returns it to work with ti\n */\nexport async function openRepository() {\n  try {\n    return await Repository.open(process.cwd())\n  } catch(e) {\n    writeError(`Couldn't open Repository`)\n    writeError(e)\n  }\n}","import { Repository, Reference } from 'nodegit';\nimport chalk from 'chalk';\nimport { checkUndefined, writeError, writeSuccess, writeCommand} from '../helper/cmd';\nimport { openRepository } from '../helper/git';\n\n\n/**\n * Create a Branch\n * @param {string} name name of the branch\n */\nexport async function createBranch(name: string) {\n  // http://www.nodegit.org/api/branch/#create\n  if(checkUndefined(name)){\n    writeError(`The branches's name must not be undefined`)\n    return null;\n  } \n  writeCommand(`$ git branch ${name}`);\n\n  // open the repository first (at cwd)\n  const repo: Repository = await openRepository();\n  if(typeof repo === 'undefined') {\n    return null;\n  }\n\n  // get the head commit \n  const headCommit = await repo.getHeadCommit();\n\n  // create the branch\n  try {\n    const ref = await repo.createBranch(name, headCommit, false);\n    writeSuccess(`Successfully created branch ${chalk.underline(name)}`);\n    return ref;\n  } catch(e) {\n    writeError(`Couldn't create new Branch`)\n    writeError(e)\n    return null;\n  }\n}\n\n/**\n * Checkout a branch\n * @param {*} reference Branch reference\n */\nexport async function checkoutBranch(reference: Reference) {\n // https://github.com/nodegit/nodegit/blob/master/examples/checkout-remote-branch.js\n // console.log('checkout');\n}","const program = require('commander');\nimport { createBranch, checkoutBranch } from './module';\n\nexport const initBranchCommands = () => {\n  // register the hit branch command\n  program\n  .command('branch [subcommand] [parameter]')\n  // --u option is only available with hit branch <branch_name> -u command \n  .option('-u, --use', 'Create and use a branch with one command (only available with commands that create a branch)')\n  .alias('b')\n  .description('Create, use, modify and merge branches')\n  .action(async (subcommand: string, parameter: string, cmd: any) => {\n    switch(subcommand) {\n      \n      case 'add':\n        // create a branch\n        const addRef = await createBranch(parameter)\n        if (cmd.use) {\n          if(addRef !== null) {\n            await checkoutBranch(addRef);\n          }\n        }\n        break;\n      \n      default:\n        /* also create a branch without using the add keyword\n         * e.g. 'hit branch newBranchName' would also create a new branch\n        */\n\n        // use subcommand instead of parameter because in this case the \"subcommand\" is the parameter so the name of the new branch\n        const defaultRef = await createBranch(subcommand)\n        if (cmd.use) {\n          if(defaultRef !== null) {\n            await checkoutBranch(defaultRef);\n          }\n        }\n        break;\n    }\n  });\n\n\n  program.parse(process.argv);\n}\n","#!/usr/bin/env node\nimport { initBranchCommands } from './branch/commands';\n\ninitBranchCommands();"]}