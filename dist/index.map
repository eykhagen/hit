{"version":3,"sources":["helper/cmd.ts","branch/module.ts","helper/git.ts","branch/commands.ts","index.ts"],"names":[],"mappings":"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","file":"index.map","sourceRoot":"../src","sourcesContent":["import chalk from 'chalk';\n/**\n * Checks whether a value is undefined\n * @param {*} value \n */\nexport const checkUndefined = (value: any) => {\n  return typeof value === 'undefined';\n}\n\n/**\n * Logs a message with a predefined Error syntax \n * @param message \n */\nexport const writeError = (message: string) => {\n  console.log(`${chalk.red('[Error]')} ${chalk.hex(\"#e74c3c\")(message)}`)\n}\n\n/**\n * Logs a message with a predefined Success syntax and a green checkmark\n * @param message \n */\nexport const writeSuccess = (message: string) => {\n  console.log(`[ ${chalk.hex('#16a085')('\\u2713')} ] ${chalk.hex('#1abc9c').bold(message)}`);\n}\n\n/**\n * Logs which git command(s) is equivalent to the used hit command to let beginners learn those quickly\n * @param message \n */\nexport const writeCommand = (message: string) => {\n  console.log(chalk.grey.bold(message));\n}","import { Repository, Reference } from 'nodegit';\nimport chalk from 'chalk';\nimport { checkUndefined, writeError, writeSuccess, writeCommand} from '../helper/cmd';\nimport { openRepository } from '../helper/git';\n\n\n/**\n * Create a Branch\n * @param {string} name name of the branch\n */\nexport async function createBranch(repo: Repository , name: string) {\n  // http://www.nodegit.org/api/branch/#create\n  if(checkUndefined(name)){\n    writeError(`The branches's name must not be undefined`)\n    return null;\n  } \n  writeCommand(`$ git branch ${name}`);\n\n  // get the head commit \n  const headCommit = await repo.getHeadCommit();\n\n  // create the branch\n  try {\n    const ref = await repo.createBranch(name, headCommit, false);\n    writeSuccess(`Successfully created branch ${chalk.underline(name)}`);\n    return ref;\n  } catch(e) {\n    writeError(`Couldn't create new Branch`)\n    writeError(e)\n    return null;\n  }\n}\n\n/**\n * Checkout a branch\n * @param {*} reference Branch reference\n */\nexport async function checkoutBranch(repo: Repository, ref: Reference) {\n  try {\n    writeCommand(`$ git checkout ${ref.name()}`);\n    await repo.checkoutBranch(ref, {})\n    writeSuccess(`Switched to branch ${chalk.underline(ref.name())}`)\n  } catch (e) {\n    writeError(`Couldn't checkout Branch`)\n    writeError(e);\n  }\n}","import { Repository } from 'nodegit';\nimport { writeError } from './cmd';\n/**\n * Opens the repository at the cwd and returns it to work with ti\n */\nexport async function openRepository() {\n  try {\n    return await Repository.open(process.cwd())\n  } catch(e) {\n    writeError(`Couldn't open Repository`)\n    writeError(e)\n  }\n}","const program = require('commander');\nimport { Repository, Reference } from 'nodegit';\nimport { createBranch, checkoutBranch } from './module';\nimport { openRepository } from '../helper/git';\nimport { checkUndefined, writeError } from './../helper/cmd';\nimport chalk from 'chalk';\n\nexport const initBranchCommands = () => {\n  // register the hit branch command\n  program\n  .command('branch [subcommand] [parameter]')\n  // --u option is only available with hit branch <branch_name> -u command \n  .option('-u, --use', 'Create and use a branch with one command (only available with commands that create a branch)')\n  .alias('b')\n  .description('Create, use, modify and merge branches')\n  .action(async (subcommand: string, parameter: string, cmd: any) => {\n    // open the repo first\n    const repo: Repository = await openRepository()\n    if(checkUndefined(repo)) {\n      return;\n    }\n\n    switch(subcommand) {\n      // create a branch\n      case 'add':\n        const addRef = await createBranch(repo, parameter)\n        if (cmd.use) {\n          if(addRef !== null) {\n            await checkoutBranch(repo, addRef);\n          }\n        }\n        break;\n\n      case 'use':\n        let branchRef: Reference | null = null;\n        try {\n          // get ref from name\n          branchRef = await repo.getBranch(parameter);\n        } catch(e) {\n          // could't find branch\n          writeError(`Couldn't find Branch ${chalk.underline(parameter)}`)\n        }\n        if(branchRef !== null) {\n          // checkout the branch\n          await checkoutBranch(repo, branchRef);\n        }\n        break;\n\n      default:\n        /* also create a branch without using the add keyword\n         * e.g. 'hit branch newBranchName' would also create a new branch\n        */\n        // use subcommand instead of parameter because in this case the \"subcommand\" is the parameter so the name of the new branch\n        const defaultRef = await createBranch(repo, subcommand)\n        if (cmd.use) {\n          if(defaultRef !== null) {\n            await checkoutBranch(repo, defaultRef);\n          }\n        }\n        break;\n    }\n  });\n\n\n  program.parse(process.argv);\n}\n","#!/usr/bin/env node\nimport { initBranchCommands } from './branch/commands';\n\ninitBranchCommands();"]}